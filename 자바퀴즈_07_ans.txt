// 자바 퀴즈 7 :  OOP

01. 주소록과 관련된 Address 클래스를 정의하고 실행 결과를 참조하여 테스트하시오. 

필드: 
이름, 전화번호, 주소 

메서드: 
생성자 
필드 출력 


[실행 결과]

[ 입력 ]
인원수 >> 3

이름, 전화번호, 주소 입력>> 오로라 010-777-7777 전주
이름, 전화번호, 주소 입력>> 마동탁 010-333-3333 마산
이름, 전화번호, 주소 입력>> 김석진 010-666-9999 천안

저장되었습니다...

[ 검색 ] 
검색할 이름 >> 홍길동
홍길동이 없습니다.

검색할 이름 >> 김석진
전화번호 : 010-666-9999
주소 : 천안 

검색할 이름 >>그만
프로그램을 종료합니다. 



[풀이]

import java.util.Scanner;

/*
01. 주소록과 관련된 Address 클래스를 정의하고 실행 결과를 참조하여 테스트하시오. 

필드: 
이름, 전화번호, 주소 

메서드: 
생성자 
필드 출력 


[실행 결과]
인원수 >> 3

이름, 전화번호, 주소 입력>> 오로라 010-777-7777 전주
이름, 전화번호, 주소 입력>> 마동탁 010-333-3333 마산
이름, 전화번호, 주소 입력>> 김석진 010-666-9999 천안
저장되었습니다...

검색할 이름 >> 홍길동
홍길동이 없습니다.

검색할 이름 >> 김석진
전화번호 : 010-666-9999
주소 : 천안 

검색할 이름 >>그만
프로그램을 종료합니다. 



 */


class Address {
	String name;
	String tel;
	String addr;

	Address(String name, String tel, String addr) {
		this.name = name;
		this.tel = tel;
		this.addr = addr;
	}
	String getName() {
		return name;
	}
	String getTel() {
		return tel;
	}
	String getAddr() {
		return addr;
	}
}



public class Quiz7_01 {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		Address phone[];
		int i;
		System.out.print("인원수 >> ");
		int num = sc.nextInt();
		phone = new Address[num];

		for(i=0; i<phone.length; i++) {
			System.out.print("이름, 전화번호, 주소 입력 >>");
			String name = sc.next();
			String tel = sc.next();
			String addr = sc.next();
			phone[i] = new Address(name, tel, addr);
		}

		System.out.println("저장되었습니다...");
		
		
		while(true) {
			System.out.print("검색할 이름 >>");
			String name = sc.next();
			for(i=0; i<num; i++) {
				if(name.equals(phone[i].getName())) {
					System.out.println(name+"의 번호는 "+phone[i].getTel()+phone[i].getAddr()+" 입니다.");
					i--;
					break;
				}
			}
			if(name.equals("그만")) break;
			if (i == num) System.out.println(name+"이 없습니다.");
		}

		sc.close();

	}
}




--------------------------------------------------
02.  상속을 이용하여 다음 클래스들을 재작성하고 테스트하시오. 
( 모든 펜의 공통 속성을 포함하는 부모 클래스 Pen 필요)


class SharpPencil { // 샤프펜슬
   int width; // 펜의 굵기
   int amount; // 남은 량
   int getAmount() { return amount; }
   void setAmount (int amount) { this.amount = amount; }
}

class Ballpen  { // 볼펜
   int amount; // 남은 량
   String color; // 볼펜의 색
   int getAmount() { return amount; }
   void setAmount (int amount) { this.amount = amount; }
   String getColor() { return color; }
   void setColor(String color) { this.color = color; }
}

class FountainPen { // 만년필
   int amount; // 남은 량
   String color; // 볼펜의 색
   int getAmount() { return amount; }
   void setAmount (int amount) { this.amount = amount; }
   String getColor() { return color; }
   void setColor(String color) { this.color = color; }
   void refill (int n) { setAmount(n); }



[ 문제 풀이 ]

class Pen { // 모든 펜의 공통 속성
   int amount; // 남은 량
   int getAmount() { return amount; }
   void setAmount (int amount) { this.amount = amount; }
}

class SharpPencil extends Pen{ // 샤프펜슬
   int width; // 펜의 굵기
} 

class Ballpen extends Pen { // 볼펜
   private String color; // 볼펜의 색
   public String getColor() { return color; }
   public void setColor(String color) { this.color = color; }
}

class FountainPen extends Ballpen{ // 만년필
   public void refill (int n) { setAmount(n); }
}


--------------------------------------------------

03.  다음 LgTV 클래스가 있다. LgTV를 상속받은 ColorTV 클래스를 선언하고 테스트하시오. 
(ColorLgTV 클래스에 추가되는 속성과 메서드는 임의 작성)

class LgTV{
   int size;
   TV(int size) { this.size = size; }
   int getSize() { return size; }
}


04. 03번의 ColorTV를 상속받는 IPTV 클래스를  선언하고 테스트하시오. 
(SmartTV 클래스에 추가되는 속성과 메서드는 임의 작성)


import java.util.Scanner;


class LgTV{
	int size;
	LgTV(int size) { this.size = size; }
	int getSize() { return size; }
}


class ColorTV extends LgTV {
	private int resolution;
	ColorTV(int size, int resolution) {
		super(size);
		this.resolution = resolution;
	}
	public void printProperty() {
		System.out.print(getSize()+"인치 "+resolution+"컬러");
	}
}

class IPTV extends ColorTV {
	String IP;
	IPTV(String IP, int size, int resolution) {
		super(size, resolution);
		this.IP = IP;
	}
	public void printProperty() {
		System.out.print("나의 IPTV는 "+IP+" 주소의 ");
		super.printProperty();
	}

}



public class Quiz7_02 {
	public static void main(String[] args) {

		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); //"192.1.1.2" 주소에 32인치, 2048컬러
		iptv.printProperty();

	}
}






05. Figure1, Figure2 클래스를 PointXY 클래스를 이용하여 
     상속과 포함 관계로 프로그래밍하고 테스트하시오. 

// PointXY 클래스
class PointXY {
	int x; 
	int y;
	
	PointXY() {}
	
	PointXY(int x, int y) {
		this.x = x;
		this.y = y;
	}
}

[ 실행 결과 예시]
=========포함관계=======
도형 이름 = 사각형
x 좌표 = 10
y 좌표 = 10
가로 = ?
세로 = ?
넓이 = ?

=========상속관계=======
도형 이름 = 타원
x 좌표 = 50
y 좌표 = 50
반지름 = ?
넓이 = ?






// 포함 관계 테스트 2

class PointXY {
	int x; 
	int y;
	
	PointXY() {}
	
	PointXY(int x, int y) {
		this.x = x;
		this.y = y;
	}
}


class Figure1 {
	// 포함 
	PointXY point = new PointXY();
	String name;
	int width;
	int height;

	Figure1(int x, int y, String name, int width, int height) {
		 point.x = x;
		 point.y = y;
		 this.name = name;				 
		 this.width = width;				 
		 this.height = height;				 
	}
	
	void displayInfo() {
		System.out.println("=========포함관계=======");
		System.out.println("도형 이름 = " + name);
		System.out.println("x 좌표 = " + point.x);
		System.out.println("y 좌표 = " + point.y);
		System.out.println("가로 = " + width);
		System.out.println("세로 = " + height);
	}
	
}


class Figure2 extends PointXY {
	// 상속  
	String name;
	int width;
	int height;

	Figure2(int x, int y, String name, int width, int height) {
		super(x,y);
		this.name = name;				 
		this.width = width;				 
		this.height = height;				 
	}
	
	void displayInfo() {
		System.out.println("=========상속관계=======");
		System.out.println("도형 이름 = " + name);
		System.out.println("x 좌표 = " + x);
		System.out.println("y 좌표 = " + y);
		System.out.println("가로 = " + width);
		System.out.println("세로 = " + height);
	}
	
}



public class Composite_test2 {

	public static void main(String[] args) {
		Figure1 f1 = new Figure1(10, 10, "사각형", 50, 50);
		f1.displayInfo();
		Figure2 f2 = new Figure2(50, 50, "사다리꼴", 100, 100);
		f2.displayInfo();
		

	}

}


06. 자동차, 트럭, 스포츠카와 관련된 클래스를 정의하고 테스트하시오. 
단 공통 속성(필드)와 기능(메서드)는 상속을 이용한다. 
크락션 기능은 오버라이딩한다.

자동차 클래스 
- 필드 : 이름, 배기량 
- 기능 : 크락션(띠띠)

트럭 클래스 
- 필드 : 이름 배기량 적재량 
- 기능 : 크락션(빵빵), 짐싣기 

스포츠카 클래스 
- 필드 ; 이름, 배기량, 최대속도 
- 기능 : 크락션(뿌와앙뽜앙!!!), 드라이브하기 







07. this, super, this(), super(), overloading, overriding 에 대해 기술하시오. 





 * this : 나 자신의 객체를 가리키는 참조 변수, this 를 통해 나의 멤버에 접근가능
 * super: 부모의 객체를 가리키는 참조 변수, super 를 통해서 부모의 멤버에 접근가능
 * 
 * this() : 내 클래스의 생성자를 호출
 * super() : 부모 클래스의 생성자를 호출

오버로딩 - 기존에 없는 새로운 메서드를 정의하는 것 
오버라이딩 - 상속받은 메서드의 내용을 변경하는 것 



08. SuperClass 와 SuperClass를 상속받는 SubClass를 선언하고 테스트하시오. 
(상속, 오버라이딩 이용) 

SuperClass 필드 
- x,y
- 조건 추가 : x는 y보다 작거나 같아야 한다.
- 조건 추가 : x가 y보다 큰경우 0으로 셋팅한다.

SuperClass 메서드 
-  title() : 부모 메소드 출력 
-  sum() : x~y까지의 누적합 반환 

SubClass 메서드 
-  title() : 자식 메소드 출력 
-  sum() : x~y까지의 짝수의 누적합 반환 (오버라이딩)
-  sum2() : x~y까지의 누적합 반환 


class SuperClass {
	void check() {
		System.out.println("부모 메소드");
	}

	void sum(int x, int y) {
		int sum = 0;
		for (int i = x; i <= y; i++) {
			sum += i;
		}
		System.out.println("합계 : " + sum);
	}
}

class SubClass extends SuperClass {
	void check() { // 메소드 오버라이딩
		System.out.println("자식 메소드");
	}

	void sum(int x, int y) { // 메소드 오버라이딩
		int even = 0;
		for (int i = x; i <= y; i++) {
			if (i % 2 == 0) {
				even += i;
			} 
		}
		System.out.println("짝수 합 : " + even);
//		super.sum(x, y); // 부모 메소드 호출
	}
	
	void sum2(int x, int y) {
		super.sum(x, y);
	}
	
	
}

public class Quiz7_08 {
	public static void main(String[] args) {

		SuperClass sup = new SuperClass();
		sup.check();
		sup.sum(0, 10);
		
		SubClass sub = new SubClass();
		sub.check();
		sub.sum(1, 10);
		sub.sum2(1, 10);
		
	}
}

