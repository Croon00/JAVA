// 자바 퀴즈 5 :  OOP

01. 한 파일에 클래스를 정의하는 경우 잘못된 경우를 모두 고르시오. 
// 4, 1

(1) 파일명 - Test1.java
public class Test1 {  }
public class Test2 {  }

(2) 파일명 - Test2.java
class Test1 {  }
class Test2 {  }

(3) 파일명 - Test1.java
public class Test1 {  }
class Test2 {  }

(4) 파일명 - Test2.java
public class Test1 {  }
class Test2 {  }




02. 포켓몬 도감(https://www.pokemonkorea.co.kr/pokedex)을 참조하여 
Pokemon 클래스를 정의하고 테스트하시오. 
 


03. 다음의 코드에 정의된 변수들을 종류별로 구분해서 기술하시오. 

class PlayingCard {
	int kind;
	int num;
	static int width;
	static int height;

	PlayingCard(int k, int n) {
		kind = k;
		num = n;
	}

	public static void main(String args[]) {
		PlayingCard card = new PlayingCard(1,1);
	}
}

클래스변수 =>  width, height
인스턴스 변수 =>  kind, num
지역 변수 => PlayingCard 메서드안의 kind, num
참조 변수 => card 




04. 햄버거 클래스를 정의하고 테스트 하시오. 

필드 : 햄버거명, 가격 
메서드 : 햄버거명과 가격을 출력한다. 

[ 실행 결과 ] 

새우버거는 3000원 입니다. 
치즈버거는 2500원 입니다.



[ 문제 풀이 ] 


// 햄버거 클래스 정의
// Hamburger.java
class Hamburger {
	// 멤버 변수 정의 
	String menu;
	int price = 2500;
	
	// 출력 메서드 정의 
	// 매개변수 X, return X
	void hamburgerInfo() {
		System.out.println("===================");
		System.out.println(" 햄버거명 => " + menu);
		System.out.println(" 가격 => " + price);
	}	
	
	// 갯수에 따라서 가격이 출력되는 메서드 정의 
	// 매개변수가 전달되는 메서드 
	// 매개변수 O, return X
	void orderInfo(int n) {
		System.out.println("===================");
		System.out.printf("%s :  %d x %d = %d%n", menu, price, n, price*n);
	}
	
	// 상호명 출력 메서드 정의 
	// 매개변수 X, return O
	String brandInfo() {
		return "버거킹 완산점";
	}
	
	// 이벤트 메세지를 반환하는 메서드 정의 
	// 매개변수 O, return O
	String eventInfo(String msg) {
		return "오늘의 이벤트 : " + msg;
	}
	
}






// 실행 클래스 
// HamburgerTest.java
public class HamburgerTest {

	public static void main(String[] args) {
		// 객체화
		// 참조변수.필드 = 값
		// 참조변수.메서드명(매개변수) = 값
		Hamburger h1 = new Hamburger(); 
		h1.menu = "치즈버거";
		h1.price = 1500; 
		h1.hamburgerInfo();
		
		Hamburger h2 = new Hamburger(); 
		h2.menu = "새우버거";
		h2.hamburgerInfo();
				
		h1.orderInfo(5);
		h2.orderInfo(3);
		
		// 출력문안에서 메서드 호출 
		System.out.println(h1.brandInfo());
		
		// 이벤트 출력 메서드 호출 
		System.out.println(h1.eventInfo("30% 할인"));
		System.out.println(h2.eventInfo("음료수 업그레이드"));

	}

}



05.  아래 소스를 참조하여 Tshirts 클래스를 정의하고 객체를 생성하시오. 

// 필드 
String size;
int price;
String color;
	
// 메소드
putOn() {System.out.println("입다");}
putOff() {System.out.println("벗다");}
doWash() {System.out.println("세탁하다");}


// 문제풀이 

//05.  아래 소스를 참조하여 Tshirts 클래스를 정의하고 객체를 생성하시오. 
//
//// 필드 
//String size;
//int price;
//String color;
//	
//// 메소드
//putOn() {System.out.println("입다");}
//putOff() {System.out.println("벗다");}
//doWash() {System.out.println("세탁하다");}


class Tshirts {
	// 필드 정의 
	String size;
	int price;
	String color;
	
	// 메서드 정의 
	void putOn() {System.out.println("입다");}
	void putOff() { System.out.println("벗다"); }
	void doWash() {System.out.println(color + "티셔츠를 세탁하다");}
	
}



public class Quiz5_05 {

	public static void main(String[] args) {
		// 객체화 
		Tshirts t1 = new Tshirts();
		t1.color = "노란색";
		t1.price = 25000;
		t1.size = "XXL";
		
		// 메서드 
		t1.putOff();
		t1.putOn();
		t1.doWash();

	}

}









06. 아래 소스를 참조하여 Score, ScoreTest 클래스를 정의하고  테스트하시오. 

// 필드 
String name;   // 학생이름
int kor, eng, math;  // 과목점수

// 메서드 1
필드 정보를 출력한다. 

// 메서드 2
총점, 평균을 출력한다.

// 메서드 3 (매개변수1, 매개변수2, returen O ) 
지역, 학교명을 학생 이름과 함께 출력한다.



[ 문제 풀이 ] 

public class Score2Test {

	public static void main(String[] args) {
		Score2 score1 = new Score2();
		score1.name = "홍길동";
		score1.kor = 70;
		score1.math = 88;
		score1.eng = 90;
		
		score1.printInfo();
		System.out.println("총점 => " + score1.getSum());
		System.out.println("평균 => " + Math.round(score1.getAvg()*10)/10.0);
		System.out.println("총점과 평균 => " + score1.printSumAvg());
		System.out.println("정보 => " + score1.infoSchool("제주", "한라산 고등학교"));
		
		
		
		Score2 score2 = new Score2();
		score2.name = "윤아름";
		score2.kor = 67;
		score2.math = 90;
		score2.eng = 100;
		
		score2.printInfo();
		System.out.println("총점 => " + score2.getSum());
		System.out.println("평균 => " + Math.round(score2.getAvg()*10)/10.0);
		System.out.println("총점과 평균 => " + score2.printSumAvg());
		System.out.println("정보 => " + score2.infoSchool("울산", "제일 중학교"));
		
		

	}

}


class Score2 {
	// 학생이름
	String name;
	
	// 과목점수
	int kor, eng, math;
	
	void printInfo()
	{
		System.out.println("\n\n이름 : " + name);
		System.out.println("국어 : " + kor);
		System.out.println("영어 : " + eng);
		System.out.println("수학 : " + math);
	}
	
	// 총점만 
	int getSum() {
		return kor+eng+math;
	}
	
	// 평균만 
	double getAvg() {
		return (kor+eng+math)/3.0;
	}
	
	// 평균 + 총점 => 문자열 
	String printSumAvg() {
		// 지역변수 
		int sum = kor+eng+math;
		double avg = (kor+eng+math)/3.0;
		return "총점 : " + sum + "  평균 : " + avg;
	}
	
	// 매개변수 2개 + 멤버변수 
	String infoSchool(String location, String schoolName) {
		return location + " " + schoolName + " , 이름 : " + name;
	}
	
}







07.  국가(Country)를 주제로 Country 클래스를 정의하고 테스트하시오. 
(클래스에 필요한 필드와 메서드는 임의로 정의한다.)




08. 07에서 정의한 Country 클래스를 객체 배열을 이용하여 인스턴스를 생성하고 
테스트하시오.





09. 아래 소스를 참조하여 Circle 클래스를 정의하고 객체를 생성하시오. 
( 클래스 변수 이용)

class Circle {
   // 클래스 변수 
    static double PI = 3.14159;
    // 인스턴스 변수 

   // 메서드 
}



[ 출력 결과 ]
원의 반지름 : 10 
원의 넓이 : 314.159 


[ 문제 풀이 ]

// 실행부 
public class CircleTest {

	public static void main(String[] args) {
		// circle1 객체 생성 
		Circle circle1 = new Circle();
		
		// PI 값을 출력하기 
		System.out.println("PI 값은? " + Circle.PI);
		
		// 인스턴스 메서드 호출
		circle1.radius = 10;
		circle1.circle_area();
	}

}

// Circle 클래스 정의 
class Circle {
	// 클래스 변수 정의 
	static double PI = 3.14159;
	
	// 멤버 변수 = 필드 정의 
	double radius;
	
	// 메서드 정의 
	// 반지름, 원의 넓이 출력 
	void circle_area() {
		System.out.println("반지름 : " + radius);
		System.out.println("원의 넓이 : " + (radius*radius*PI));		
	}
	
}




10. 다음과 같이 정의된 메서드를 작성하고 테스트하시오.
메서드명 : abs
기 능 
: 주어진 값의 절대값을 반환한다 
: static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ]
5 => 5
-10 -> 10




// 실행부 클래스 
public class Static_method1 {

	// 절대값을 반환하는 static 메서드 정의 
	static int abs(int n) {
		if (n<0) 
			return -n;
		else 
			return n;
	}
	
	
	public static void main(String[] args) {
		// static 메서드 호출 
		int n = 10;
		System.out.println(n + " => " + abs(n));
		n = -40;
		System.out.println(n + " => " + abs(n));

	}

}



11.  1~n 까지의 정수의 합을 구하는 메서드를 정의하고 테스트하시오.
메서드명 : sum_n
기 능 :  
1~n 까지의 정수의 합을 구하하고 출력한다. 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ] 

 1~ 100 까지의 합은 ... 5050 
 1~ 500 까지의 합은 ... 125250 



/*
11.  1~n 까지의 정수의 합을 구하는 메서드를 정의하고 테스트하시오.
메서드명 : sum_n
기 능 :  
1~n 까지의 정수의 합을 구하하고 출력한다. 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ] 

 1~ 100 까지의 합은 ... 5050 
 1~ 500 까지의 합은 ... 125250 

*/

public class Quiz5_11 {
	// static 메서드는 객체 생성 없이 호출 가능 
	// 인스턴스 메서드, 클래스 메서드, static 메서드 
	
	static int sum_n(int n) {
		int sum=0;
		for (int i = 1; i <= n; i++) {
			sum+=i;
		}	
		return sum;
	}
	
	public static void main(String[] args) {
		System.out.printf("%n 1~ %d 까지의 합은 ... %d ", 100, sum_n(100)); 
		System.out.printf("%n 1~ %d 까지의 합은 ... %d ", 500, sum_n(500)); 
		System.out.printf("%n 1~ %d 까지의 합은 ... %d ", 1000, sum_n(1000)); 
	}

}








12. 사각형의 넓이를 구하는 메서드를 정의하고 테스트하시오.

메서드명 : rect_area
기 능 :  
사각형의 넓이를 구하고 값을 반환한다. 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 


[ 실행 결과 ] 
?  x  ?  = ?


/*
12. 사각형의 넓이를 구하는 메서드를 정의하고 테스트하시오.

메서드명 : rect_area
기 능 :  
사각형의 넓이를 구하고 값을 반환한다. 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 


[ 실행 결과 ] 
?  x  ?  = ?

*/

public class Quiz5_12 {
	
	
	static String rect_area(int w, int h) {	
		return w + " x " + h + " = " + w*h;
	}
	
	public static void main(String[] args) {
		System.out.printf("%n rect_area(4, 5) ... %s ", rect_area(4, 5)); 
		System.out.printf("%n rect_area(7, 13) ... %s ", rect_area(7, 13)); 
	}

}


13.  다음과 같이 정의된 메서드를 작성하고 테스트하시오.
메서드명 : max
기 능:
주어진 형 배열의 값 중에서 제일 큰 값을 반환한다
만일 주어진 배열이 null 이거나 크기가 0 인 경우 -999999 를 반환한다 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ]
[3, 2, 9, 4, 7]
최대값:9
최대값:-999999
최대값:-999999


import java.util.Arrays;

/*
13.  다음과 같이 정의된 메서드를 작성하고 테스트하시오.
메서드명 : max
기 능:
주어진 형 배열의 값 중에서 제일 큰 값을 반환한다 : int .
만일 주어진 배열이 null 이거나 크기가 0 인 경우 -999999 를 반환한다 
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 


[ 실행 결과 ]
[3, 2, 9, 4, 7]
최대값:9
최대값:-999999
최대값:-999999


 */

public class Quiz5_13 {

	// 매개변수 : 정수 배열 : 데이타형[] 매개변수명 
	// 반환값  : 정수 
	static int max(int[] arr) {
		
		if(arr==null || arr.length==0)
			return -999999;
		
		int max = arr[0]; // . 배열의 첫 번째 값으로 최대값을 초기화 한다
		for(int i=1; i< arr.length;i++) { // . 배열의 두 번째 값부터 비교한다
			if(arr[i] > max)
				max = arr[i];
		}
		
		return max;
	}

	public static void main(String[] args) {
		int[] data = {3,2,9,4,7};
		System.out.println(Arrays.toString(data));
		System.out.println(" max(data) 최대값 : "+ max(data)); //
		System.out.println(" max(null) 최대값 : "+ max(null)); //
		System.out.println(" max(new int[]{}) 최대값 : "+ max(new int[]{})); // 0 최대값 크기가 인 배열
	}

}





14.    다음과 같이 정의된 메서드를 작성하고 테스트하시오.

메서드명 : shuffle
기 능 :  
주어진 배열에 담긴 값의 위치를 바꾸는 작업을 반복하여 뒤섞이게 한다 : .
처리한 배열을 반환한다.
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ] 
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[4, 6, 8, 3, 2, 9, 7, 1, 5]


import java.util.Arrays;

/*
14.    다음과 같이 정의된 메서드를 작성하고 테스트하시오.

메서드명 : shuffle
기 능 :  
주어진 배열에 담긴 값의 위치를 바꾸는 작업을 반복하여 뒤섞이게 한다 : .
처리한 배열을 반환한다.
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[ 실행 결과 ] 
[1, 2, 3, 4, 5, 6, 7, 8, 9]
[4, 6, 8, 3, 2, 9, 7, 1, 5]


 */

public class Quiz5_14 {

	// 입력 매개변수 정수 배열
	// 출력 return 정수 배열 
	static int[] shuffle(int[] arr) {
		
		if(arr==null || arr.length==0)
			return arr;
		
		for(int i=0; i< arr.length;i++) {
			int j = (int)(Math.random()*arr.length);
			// arr[i] arr[j] . 와 의 값을 서로 바꾼다
			int tmp = arr[i];
			arr[i] = arr[j];
			arr[j] = tmp;
		}
		return arr;
	}

	public static void main(String[] args) {
		int[] original = {1,2,3,4,5,6,7,8,9};
		System.out.println(" Before => " + Arrays.toString(original));
		int[] result = shuffle(original);
		System.out.println(" After1 => " + Arrays.toString(result));
		result = shuffle(original);
		System.out.println(" After2 => " + Arrays.toString(result));

	}

}



15.  n*n 2차원 배열을 생성하는 메서드를 정의하고 테스트하시오.

메서드명 : make_2dArray
기 능 :  
n*n 2차원 배열을 생성하고 배열을 반환한다. 
배열 값은 10~99 사이의 난수 정수를 이용한다.
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[실행 결과] 

 3 X 3 배열 

23  45  99
55  23  10
77  94  12





import java.util.Arrays;

/*
15.  n*n 2차원 배열을 생성하는 메서드를 정의하고 테스트하시오.

메서드명 : make_2dArray
기 능 :  
n*n 2차원 배열을 생성하고 배열을 반환한다. 
배열 값은 10~99 사이의 난수 정수를 이용한다.
static 메서드 방식으로 객체 생성없이 호출 가능하게 한다. 

[실행 결과] 

 3 X 3 배열 

23  45  99
55  23  10
77  94  12




 */

public class Quiz5_15 {

	// 매개변수 정수 2개 
	// 출력 return 배열 2차원 
	// 배열 반환 
	static int[][] make_2dArray(int n1, int n2) {
		
		// 배열 생성 
		int[][] arr = new int[n1][n2];
		int temp; // 난수 값 저장 변수 
		
		
		// 난수값으로 초기화 
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				temp = (int)(Math.random()*(99-10+1)+10);
				arr[i][j] = temp;
			}
		}
		
		return arr;
	}
	
	// 매개변수 정수 2개 
	// 출력 void
	// 배열 반환 
	static void make_2dArray2(int n1, int n2) {
		int[][] arr = new int[n1][n2];
		int temp;
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				temp = (int)(Math.random()*(99-10+1)+10);
				arr[i][j] = temp;
			}
		}
		System.out.println("=====================");
		System.out.printf("%3d   X %3d 배열%n", n1, n2);
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				System.out.printf("%3d", arr[i][j]);
			}
			System.out.println();
		}
		
	}
	
	public static void main(String[] args) {
		int[][] result = make_2dArray(3,3);
		
		System.out.println("3 X 3 배열");
		System.out.println(Arrays.deepToString(result));
		for (int i = 0; i < result.length; i++) {
			for (int j = 0; j < result[i].length; j++) {
				System.out.printf("%3d", result[i][j]);
			}
			System.out.println();
		}
		
		int[][] result2 = make_2dArray(5,5);
		System.out.println("5 X 5 배열");
		System.out.println(Arrays.deepToString(result2));
		for (int i = 0; i < result2.length; i++) {
			for (int j = 0; j < result2[i].length; j++) {
				System.out.printf("%3d", result2[i][j]);
			}
			System.out.println();
		}
		
		
		make_2dArray2(4,4);
		make_2dArray2(2,2);
		
		
		
		

	}

}















