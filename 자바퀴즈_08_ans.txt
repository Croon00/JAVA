// 자바 퀴즈 8 :  OOP


01. 자바의 클래스와 객체에 대한 설명 중 틀린 것은?

1) 클래스 바깥에 전역 변수는 선언할 수 없다.

2) 클래스는 객체를 생성하기 위한 틀이다.

3) 클래스의 멤버 변수를 필드라고 부르며, 클래스는 필드와 메소드로 이루어진다..

4) 필드는 클래스 내에서 private 보다 public으로 선언하는 것이 바람직하다.


[ 문제 풀이 ]
- 4. 필드는 클래스 내에서 private 보다 public으로 선언하는 것이 바람직하다. 
_ public보다 private로 선언하는 것이 바람직하다.



02. 패키지에 대한 설명 중 잘못된 것은?

1). package 키워드를 이용하여 패키지를 선언한다.

2). 서로 관련된 클래스와 인터페이스들을 하나의 디렉터리에 묶어 놓은 것이다.

3). 패키지는 컴파일된 클래스 파일들을 저장하는 위치를 지정한다.

4) 자바 JDK는 클래스들을 모두 하나의 패키지에 담아 제공한다.


[문제 풀이]
- 4. 자바 JDK는 클래스들을 모두 하나의 패키지에 담아 제공한다.



03. com.quiz 패키지안에 500~599 사이의 숫자 중 10개를 출력하도록 
프로그래밍하여라. 이때 Math.random() 대신 random()을 이용하도록한다.






[ 문제 풀이] 
100에서 255까지(255 포함)의 난수를 10개 발생시키는 코드이다.

for(int i=0; i<10; i++) {
	System.out.println(              );
	System.out.println(" ");
}



192 207 131 249 204 120 132 207 194 236
(1) Math 클래스를 활용하여 빈칸에 적절한 코드를 작성하라.

for(int i=0; i<10; i++) {
	System.out.println((int)(Math.random()*156+100));
	System.out.println(" ");
}

(2) Random 클래스로 난수를 발생시키도록 코드 전체를 재작성하라.

import java.util.Random;
public class java_study {
	public static void main(String[] args) {
		Random r = new Random();
		for(int i=0; i<10; i++) {
			System.out.print(r.nextInt(156)+100);
			System.out.print(" ");
		}
	}
}










04. 다음 클래스에는 컴파일 오류가 있다. 오류를 수정하여 결과가 출력되도록 프로그래밍하여라. 

class Person {
    private int age;
}

public class Example {
    public static void main (String args[]) {
        Person aPerson = new Person();
        aPerson.age = 17;
    }
}





[풀이]

class Person {
   private int age;
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
}
[이유]

- age가 private로 선언되어 있기 때문에, Person 클래스 밖에서 접근이 불가능하다.

[객체 지향 프로그래밍에 가장 적합한 방법]

- 객체 지향 프로그래밍에서는 클래스의 주요 필드는 private로 해두고, public 속성의 set/get 메소드를 별도로 만들어 이 메소드를 통해서만 필드를 접근하게 하여 필드의 무결성을 유지하는 것이 좋다.



05. 다음 코드를 객체 지향 프로그래밍의 특징인 
데이타의 은닉, 캡슐화를 적용하여 
다시 프로그래밍하고 테스트하시오. 


class Power {
    public int kick;
    public int punch;
}


public class Example {
    public static void main (String args[]) {
        Power robot = new Power();
        robot.kick = 10;
        robot.punch = 20;
    }
}





[풀이]

class Power{
   private int kick;
   private int punch;
   public void setKick(int kick) {
      this.kick = kick;
   }
   public void setPunch(int punch) {
      this.punch = punch;
   }
}


06. 다음 코드에서 오류가 있다면 
오류를 수정하여 결과가 출력되도록 프로그래밍하여라. 

class StaticSample {
    public int x;
    public static int y;
    public static int f() { return y; }
}
public class UsingStatic {
    public static void main (String[] args) {
        StaticSample.x = 5; //(1)
        StaticSample.y = 10; //(2)
        int tmp = StaticSample.f(); //(3)
        StaticSample a = new StaticSample();
        tmp = a.y; //(4)
    }
}


[ 문제풀이 ]
- 1. StaticSample.x = 5; _ StaticSample StaticSample = new StaticSample();를 main 안에 써줘야 한다.

- static 멤버는 new에 의해 객체가 생성되기 전에 사용이 가능하다.





07.  다음 코드에는 final과 관련하여 오류가 발생한다. 오류의 원인을 기술하여라. 

final class Rect {
    final protected int x = 5;
    final public void f() {
        x++;
        System.out.pring(x);
    }
}
class SpecialRect extends Rect { // SpecialRect는 Rect를 상속받는다.
    public void f() {
        System.out.print(super.x); // super.x는 Rect의 x
    }
}


[풀이]

final class Rect {
    final protected int x = 5;
    final public void f() {
        x++; // final 붙은 변수는 변경되지 못한다. (상수처리)
        System.out.pring(x);
    }
}
class SpecialRect extends Rect { // final 붙은 클래스는 상속하지 못한다.
    public void f() {
        System.out.print(super.x); // final 붙은 메소드는 오버라이딩 되지 못한다.
    }
}




//08.  달을 입력하면 입력한 달의 마지막 날짜와 계절을 출력하도록 프로그래밍하시오.
//조건 : private 접근 제한자 이용. 달은 1~12까지만 입력 가능. getter(), setter() 이용 
//
//class Mydate {
//     private int day;
//     private int month;
//}  


[ 문제풀이 ] 
import java.util.Scanner;

//08.  달을 입력하면 입력한 달의 마지막 날짜와 계절을 출력하도록 프로그래밍하시오.
//조건 : private 접근 제한자 이용. 달은 1~12까지만 입력 가능. getter(), setter() 이용 
//
//class Mydate {
//     private int day;
//     private int month;
//}  
//
//
//[ 실행 결과 ] 
//
//Month 입력 >>  2
//
//출력 
//2월은 겨울입니다. 마지막 날짜는 28일 또는 29일 입니다. 


class Mydate {
	//private int day;
	private int month;
	
	
	//public int getDay() {
	//	return day;
	//}
	//public void setDay(int day) {
	//	//this.day = day;
	//}
	
	public int getMonth() {
//		return month;
		if (month !=0) {
			return month;			
		} else {
			System.out.println("잘못된 입력입니다");
			return month;
		}
	}
	
	public void setMonth(int month) {
		if (month>=1 && month<=12) {
			this.month = month;
		} else {
			this.month = 0;
		}
		
	}
	
	public void info() {
		switch (month) {
		case 1:
		case 12:
			System.out.printf("%d월은 겨울입니다. 마지막 날짜는 31일 입니다.", month);
			break;
		case 2:
			System.out.printf("%d월은 겨울입니다. 마지막 날짜는 28일 또는 29일 입니다.", month);
			break;
		case 3:
		case 5:
			System.out.printf("%d월은 봄입니다. 마지막 날짜는31일 입니다.", month);
			break;
		case 4:
			System.out.printf("%d월은 봄입니다. 마지막 날짜는30일 입니다.", month);
			break;	
		case 6:
			System.out.printf("%d월은 여름입니다. 마지막 날짜는30일 입니다.", month);
			break;
		case 7:
		case 8:
			System.out.printf("%d월은 여름입니다. 마지막 날짜는31일 입니다.", month);
			break;	
		case 9:
		case 11:
			System.out.printf("%d월은 가을입니다. 마지막 날짜는30일 입니다.", month);
			break;	
		case 10:
			System.out.printf("%d월은 가을입니다. 마지막 날짜는31일 입니다.", month);
			break;	
		default:
			System.out.println("잘못된 입력입니다");
			break;
		}
	}



}


public class Quiz8_08 {

	public static void main(String[] args) {
		
		System.out.print("Month 입력 >>  ");
		Scanner sc = new Scanner(System.in);
		int ans = sc.nextInt();
		
		Mydate d1 = new Mydate();
		// 값 전달 
		d1.setMonth(ans);
		
		d1.getMonth();
		d1.info();
		

	}

}









//09. 08의 프로그래밍과 윤년 알고리즘을 이용하여 
//    달의 마지막 날짜와 윤년인지 평년인지 출력하도록 
//    프로그래밍하시오.
//(윤년 알고리즘은 인터넷 활용) 
//
//class Mydate2 {
//     private int day;
//     private int month;
//     private int year;
//}  
//
//
//[ 실행 결과 ] 
//Year 입력 >> ?
//Month 입력 >>  2
//
//출력 
//? 년 2월은 윤년입니다. 마지막 날짜는 29일 입니다. 
 
import java.util.Scanner;


//09. 08의 프로그래밍과 윤년 알고리즘을 이용하여 
//    달의 마지막 날짜와 윤년인지 평년인지 출력하도록 
//    프로그래밍하시오.
//(윤년 알고리즘은 인터넷 활용) 
//
//class Mydate2 {
//     private int day;
//     private int month;
//     private int year;
//}  
//
//
//[ 실행 결과 ] 
//Year 입력 >> ?
//Month 입력 >>  2
//
//출력 
//? 년 2월은 윤년입니다. 마지막 날짜는 29일 입니다. 



class Mydate2 {
	private int year;
	private int month;
	
	//public void setDay(int day) {
	//	//this.day = day;
	//}
	
	public int getMonth() {
//		return month;
		if (month !=0) {
			return month;			
		} else {
			System.out.println("잘못된 입력입니다");
			return month;
		}
	}
	
	public void setMonth(int month) {
		if (month>=1 && month<=12) {
			this.month = month;
		} else {
			this.month = 0;
		}
		
	}
	


	public void setYear(int year) {
		this.year = year;		
	}
	
	public String getYear() {
		//윤년 : 해당 연도를 4로 나눈 값이 0인 것을 의미
        //그 중 100으로 나눈 값이 0인 것은 제외, 
		// 400으로 나눈 값이 0인 것은 윤년에 포함 (그외 평년)
        if((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
            return "윤년";
        }else {
        	return "평년";
        }
	}
	
	// 마지막 날짜 
	public int getDay() {
		int day = 31;
		String msg = getYear();
		switch (month) {
		case 4:
		case 6:
		case 9:
		case 11:
			day = 30;
			break;
		case 2:
			if (msg.equals("윤년")) {
				day = 29;
			} else {
				day = 28;
			}
		default:
			break;
		}
		return day;
	}
	
	public void info2() {
		System.out.printf("%d 년 %s입니다. %d월의 마지막 날짜는 %d일 입니다."
				, year, getYear(), getMonth(), getDay());
	}


}


public class Quiz8_09 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("Year 입력 >>  ");
		int ans0 = sc.nextInt();
		
		System.out.print("Month 입력 >>  ");
		int ans = sc.nextInt();
		
		
		// 1988년, 1992년, 1996년, 2004년, 2008년, 2012년, 2016년, 
		// 2020년, 2024년, 2028년, 2032년, 2036년, 2040년, 2044년
		Mydate2 d2 = new Mydate2();
		d2.setMonth(ans);
		d2.setYear(ans0);
		
//		d1.getMonth();
		d2.info2();
		

	}

}


